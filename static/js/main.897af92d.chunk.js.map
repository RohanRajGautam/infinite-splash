{"version":3,"sources":["components/Header/index.js","components/Header/Header.js","components/Button/index.js","components/Button/Button.jsx","constants/index.js","actions/index.js","components/Stats/index.js","components/Stats/Stats.jsx","components/ImageGrid/index.js","components/ImageGrid/ImageGrid.jsx","App.js","reducers/loadingReducer.js","reducers/errorReducer.js","reducers/imageReducer.js","reducers/pageReducer.js","reducers/statsReducer.js","reducers/index.js","api/index.js","sagas/imagesSaga.js","sagas/statsSaga.js","sagas/index.js","index.js","store/index.js"],"names":["Header","className","role","aria-label","href","target","rel","button","children","loading","props","disabled","IMAGES","LOAD","LOAD_SUCCESS","LOAD_FAIL","STATS","setImages","images","type","loadImageStats","id","setImageStats","downloads","setImageStatsError","LOAD_FAILURE","Stats","stats","error","isLoading","ImageGrid","connect","imagesStats","dispatch","loadImages","useEffect","map","image","index","key","Math","ceil","height","width","src","urls","small","alt","user","username","JSON","stringify","onClick","App","loadingReducer","state","action","errorReducer","imagesReducer","pageReducer","statsReducer","rootReducer","combineReducers","nextPage","URL","fetchImages","page","a","fetch","response","json","data","status","Error","errors","fetchImageStats","handleImagesLoad","watchImagesLoad","getPage","select","call","put","toString","takeEvery","handleStatsRequest","watchStatsRequest","i","res","total","take","length","fork","rootSaga","all","imagesSaga","statsSaga","store","sagaMiddleware","createSagaMiddleware","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","run","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.897af92d.chunk.js","sourcesContent":["import Header from './Header';\n\nexport default Header;\n","import React from 'react';\nimport './styles.css';\n\nconst Header = () => {\n  return (\n    <>\n      <div className='header'>Infinite Splash!</div>\n      <div className='subtitle'>\n        Made with{' '}\n        <span role='img' aria-label='love'>\n          💖\n        </span>{' '}\n        by{' '}\n        <a\n          href='https://rohangautam.com.np/'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          Rohan Gautam\n        </a>{' '}\n      </div>\n    </>\n  );\n};\n\nexport default Header;\n","import button from './Button';\n\nexport default button;\n","import React from 'react';\nimport './style.css';\n\nconst Button = ({ children, loading, ...props }) => {\n  return (\n    <button className='button' disabled={loading} {...props}>\n      {loading ? 'Loading...' : children}\n    </button>\n  );\n};\n\nexport default Button;\n","const IMAGES = {\n  LOAD: 'IMAGES_LOAD',\n  LOAD_SUCCESS: 'IMAGES_LOAD_SUCCESS',\n  LOAD_FAIL: 'IMAGES_LOAD_FAIL',\n};\n\nconst STATS = {\n  LOAD: 'STAT_LOAD',\n  LOAD_SUCCESS: 'STAT_LOAD_SUCCESS',\n  LOAD_FAIL: 'STAT_LOAD_FAIL',\n};\n\nexport { IMAGES, STATS };\n","import { IMAGES, STATS } from '../constants/index';\n\nexport const loadImages = () => ({\n  type: IMAGES.LOAD,\n});\n\nexport const setImages = (images) => ({\n  type: IMAGES.LOAD_SUCCESS,\n  images,\n});\n\nexport const setError = (error) => ({\n  type: IMAGES.LOAD_FAILURE,\n  error,\n});\n\nexport const loadImageStats = (id) => ({\n  type: STATS.LOAD,\n  id,\n});\n\nexport const setImageStats = (id, downloads) => ({\n  type: STATS.LOAD_SUCCESS,\n  id,\n  downloads,\n});\n\nexport const setImageStatsError = (id) => ({\n  type: STATS.LOAD_FAILURE,\n  id,\n});\n","import Stats from './Stats';\n\nexport default Stats;\n","import React from 'react';\nimport './style.css';\n\nconst Stats = ({ stats }) => {\n  if (!stats) {\n    return <span className='stats'>Loading...</span>;\n  }\n  return (\n    <span className='stats'>\n      {stats.error && '😐 Error!'}\n      {stats.isLoading && '🙄 Loading...'}\n      {stats.downloads !== null && `😎 ${stats.downloads}`}\n    </span>\n  );\n};\n\nexport default Stats;\n","import ImageGrid from './ImageGrid';\n\nexport default ImageGrid;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../Button';\n\nimport { loadImages } from '../../actions';\n\nimport './styles.css';\nimport Stats from '../Stats';\n\nconst ImageGrid = ({ loadImages, images, isLoading, error, imagesStats }) => {\n  useEffect(() => {\n    loadImages();\n  }, [loadImages]);\n\n  return (\n    <div className='content'>\n      <section className='grid'>\n        {images.map((image, index) => (\n          <div\n            key={index}\n            className={`item item-${Math.ceil(image.height / image.width)}`}\n          >\n            <Stats stats={imagesStats[image.id]} />\n            <img src={image.urls.small} alt={image.user.username} />\n          </div>\n        ))}\n      </section>\n      {error && <div className='error'>{JSON.stringify(error)}</div>}\n      <Button onClick={() => !isLoading && loadImages()} loading={isLoading}>\n        Load More\n      </Button>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ isLoading, images, error, imagesStats }) => ({\n  isLoading,\n  images,\n  error,\n  imagesStats,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  loadImages: () => dispatch(loadImages()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageGrid);\n","import React, { Fragment } from 'react';\n\nimport Header from './components/Header';\nimport ImageGrid from './components/ImageGrid';\n\nfunction App() {\n  return (\n    <Fragment>\n      <Header />\n      <ImageGrid />\n    </Fragment>\n  );\n}\n\nexport default App;\n","import { IMAGES } from '../constants';\n\nconst loadingReducer = (state = false, action) => {\n  switch (action.type) {\n    case IMAGES.LOAD:\n      return true;\n\n    case IMAGES.LOAD_FAIL:\n      return false;\n\n    case IMAGES.LOAD_SUCCESS:\n      return false;\n\n    default:\n      return state;\n  }\n};\n\nexport default loadingReducer;\n","import { IMAGES } from '../constants';\n\nconst errorReducer = (state = null, action) => {\n  switch (action.type) {\n    case IMAGES.LOAD:\n      return null;\n    case IMAGES.LOAD_FAIL:\n      return action.error;\n    case IMAGES.LOAD_SUCCESS:\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default errorReducer;\n","import { IMAGES } from '../constants';\n\nconst imagesReducer = (state = [], action) => {\n  if (action.type === IMAGES.LOAD_SUCCESS) {\n    return [...state, ...action.images];\n  }\n  return state;\n};\n\nexport default imagesReducer;\n","import { IMAGES } from '../constants';\n\nconst pageReducer = (state = 2, action) => {\n  switch (action.type) {\n    case IMAGES.LOAD_SUCCESS:\n      return state + 1;\n    default:\n      return state;\n  }\n};\n\nexport default pageReducer;\n","import { STATS } from '../constants';\n\nconst statsReducer = (state = {}, action) => {\n  switch (action.type) {\n    case STATS.LOAD:\n      return {\n        ...state,\n        [action.id]: {\n          isLoading: true,\n          downloads: null,\n          error: false,\n        },\n      };\n\n    case STATS.LOAD_SUCCESS:\n      return {\n        ...state,\n        [action.id]: {\n          isLoading: false,\n          downloads: action.downloads,\n          error: false,\n        },\n      };\n\n    case STATS.LOAD_FAIL:\n      return {\n        ...state,\n        [action.id]: {\n          isLoading: false,\n          downloads: null,\n          error: true,\n        },\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default statsReducer;\n","import { combineReducers } from 'redux';\n\nimport loadingReducer from './loadingReducer';\nimport errorReducer from './errorReducer';\nimport imagesReducer from './imageReducer';\nimport pageReducer from './pageReducer';\nimport statsReducer from './statsReducer';\n\nconst rootReducer = combineReducers({\n  isLoading: loadingReducer,\n  images: imagesReducer,\n  error: errorReducer,\n  nextPage: pageReducer,\n  imagesStats: statsReducer,\n});\n\nexport default rootReducer;\n","const key = '?client_id=2bSEzlBpFNe-kyUzTXyU8-J9-rcxqP7F4P0PEQW3URU';\n\nconst URL = 'https://api.unsplash.com/photos/';\n\nconst fetchImages = async (page) => {\n  const response = await fetch(`${URL}${key}&per_page=6&page=${page}`);\n  const data = await response.json();\n\n  if (response.status >= 400) {\n    throw new Error(data.errors);\n  }\n  return data;\n};\n\nconst fetchImageStats = async (id) => {\n  const response = await fetch(`${URL}${id}/statistics/${key}`);\n  const data = await response.json();\n  if (response.status >= 400) {\n    throw new Error(data.errors);\n  }\n  return data;\n};\n\nexport { fetchImages, fetchImageStats };\n","import { takeEvery, select, call, put } from 'redux-saga/effects';\n\nimport { fetchImages } from '../api';\nimport { setImages, setError } from '../actions';\nimport { IMAGES } from '../constants';\n\nexport const getPage = (state) => state.nextPage;\n\n//this is worker saga\nexport function* handleImagesLoad() {\n  try {\n    // select effect allows you to grab a slice of a state\n    const page = yield select(getPage);\n\n    // call effect suspends the saga until the fetchImages succeed\n    const images = yield call(fetchImages, page);\n\n    // put is to dispatch an action\n    yield put(setImages(images));\n  } catch (error) {\n    yield put(setError(error.toString()));\n  }\n}\n\n// this is watcher saga\nexport default function* watchImagesLoad() {\n  yield takeEvery(IMAGES.LOAD, handleImagesLoad);\n}\n","import { take, fork, put, call } from 'redux-saga/effects';\nimport { IMAGES } from '../constants';\nimport { loadImageStats, setImageStats, setImageStatsError } from '../actions';\nimport { fetchImageStats } from '../api';\n\n// worker saga\nexport function* handleStatsRequest(id) {\n  for (let i = 0; i < 3; i++) {\n    try {\n      yield put(loadImageStats(id));\n      const res = yield call(fetchImageStats, id);\n      yield put(setImageStats(id, res.downloads.total));\n      return true;\n    } catch (error) {}\n  }\n  yield put(setImageStatsError(id));\n}\n\n// watcher saga\nexport default function* watchStatsRequest() {\n  while (true) {\n    const { images } = yield take(IMAGES.LOAD_SUCCESS);\n\n    for (let i = 0; i < images.length; i++) {\n      yield fork(handleStatsRequest, images[i].id);\n    }\n  }\n}\n","import { all } from 'redux-saga/effects';\n\nimport imagesSaga from './imagesSaga';\nimport statsSaga from './statsSaga';\n\nfunction* rootSaga() {\n  yield all([imagesSaga(), statsSaga()]);\n}\n\nexport default rootSaga;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport App from './App';\n\nimport './index.css';\n\nimport configureStore from './store';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(\n    rootReducer,\n    compose(\n      applyMiddleware(sagaMiddleware),\n      window.__REDUX_DEVTOOLS_EXTENSION__ &&\n        window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n  );\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default configureStore;\n"],"sourceRoot":""}